fileNumber=1
### Data files
GrowDataFile<-GrowDataFileVector[fileNumber]
GrowDataFile
AnnotationFile <-AnnotationFileVector[fileNumber]
AnnotationFile
pwd<-pathVector[fileNumber]
### Merge curves and target file
CONNECTORList <- DataImport(GrowDataFile,AnnotationFile)
### Visualization
gr<-GrowthCurve(CONNECTORList,"Progeny")
gr$GrowthCurve_plot
### Truncation
TrTime<-TruncTime[fileNumber]
TrTime
CONNECTORList<- DataTruncation(CONNECTORList,
feature="Progeny",
TrTime,
labels = c("time","volume","Tumor Growth"))
fileNumber=1
### Data files
GrowDataFile<-GrowDataFileVector[fileNumber]
GrowDataFile
AnnotationFile <-AnnotationFileVector[fileNumber]
AnnotationFile
pwd<-pathVector[fileNumber]
### Merge curves and target file
CONNECTORList <- DataImport(GrowDataFile,AnnotationFile)
### Visualization
gr<-GrowthCurve(CONNECTORList,"Progeny")
gr$GrowthCurve_plot
gr$GrowthCurve_plot
gr<-DataVisualization(CONNECTORList,"Progeny")
DataVisualization(CONNECTORList,"Progeny")
fileNumber=1
### Data files
GrowDataFile<-GrowDataFileVector[fileNumber]
GrowDataFile
AnnotationFile <-AnnotationFileVector[fileNumber]
AnnotationFile
pwd<-pathVector[fileNumber]
### Merge curves and target file
CONNECTORList <- DataImport(GrowDataFile,AnnotationFile)
### Visualization
DataVisualization(CONNECTORList,"Progeny")
fileNumber=1
### Data files
GrowDataFile<-GrowDataFileVector[fileNumber]
GrowDataFile
AnnotationFile <-AnnotationFileVector[fileNumber]
AnnotationFile
pwd<-pathVector[fileNumber]
### Merge curves and target file
CONNECTORList <- DataImport(GrowDataFile,AnnotationFile)
### Visualization
DataVisualization(CONNECTORList,"Progeny")
DataVisualization(CONNECTORList,"Progeny")
TruncTime[fileNumber]
### Truncation
TrTime<-TruncTime[fileNumber]
TrTime
CONNECTORList<- DataTruncation(CONNECTORList,
feature="Progeny",
TrTime,
labels = c("time","volume","Tumor Growth"))
##################################
############## Malthus fitting:
# Initial conditions:
lower<-c(10^(-5),0)
upper<-c(10^3,10^3)
init<- list(V0=max(0.1,min(CONNECTORList$Dataset$Vol)),
a=1)
Malthus<- FittingAndClustering(data = CONNECTORList,
G = 2:7,
model="Malthus",
fitting.method="GenSA",
lower=lower,
upper=upper,
init=init,
runs=100,
path=pwdM)
if (file.exists(paste0(pwd,"/FittingMalthus")) ){
pwdM<-paste0(pwd,"FittingMalthus/")
} else {
dir.create(file.path(pwd, "FittingMalthus"))
pwdM<-paste0(pwd,"FittingMalthus/")
}
##################################
############## Malthus fitting:
# Initial conditions:
lower<-c(10^(-5),0)
upper<-c(10^3,10^3)
init<- list(V0=max(0.1,min(CONNECTORList$Dataset$Vol)),
a=1)
Malthus<- FittingAndClustering(data = CONNECTORList,
G = 2:7,
model="Malthus",
fitting.method="GenSA",
lower=lower,
upper=upper,
init=init,
runs=100,
path=pwdM)
Malthus$All.runs$boxplots
Malthus$Consensus.Info$`G= 3`$ConsensusPlot
Malthus$Consensus.Info$`G= 5`$ConsensusPlot
clusterdata=Malthus$Consensus.Info$`G= 3`$MostProbableClustering
Plots<-ClusterWithMeanCurve_Classic(clusterdata,
data=CONNECTORList,
feature="Progeny",
title="",
labels=c("",""),
save=TRUE,
path=pwdM )
Plots$plotMeanCurve
Plots$plotsCluster$ALL
if (file.exists(paste0(pwd,"/FittingLogistic")) ){
pwdL<-paste0(pwd,"FittingLogistic/")
} else {
dir.create(file.path(pwd, "FittingLogistic"))
pwdL<-paste0(pwd,"FittingLogistic/")
}
# Initial conditions:
lower<-c(10^(-5),0,0)
upper<-c(10^2,10^5,1)
init<- list(V0=max(0.1,min(CONNECTORList$Dataset$Vol)),a=.5, b=.5)
Logistic<- FittingAndClustering(data = CONNECTORList,
G = 2:7,
model="Logistic",
fitting.method="GenSA",
lower=lower,
upper=upper,
init=init,
path=pwdL,
runs=100)
Logistic$All.runs$boxplots
load("/home/pernice/Desktop/connectrExper/Prova/ClusteredData_G3to6_h1_p3.RData")
names(CONNECTORList.FCM$ConsensusInfo[[1]])
nmCL<-names(CONNECTORList.FCM$ConsensusInfo[[1]])
as.numeric(gsub("G= ", "", nmCL))
length(CONNECTORList.FCM$FCM$prediction$meancurves[1,])
CONNECTORList.FCM$FCM$prediction$meancurves[1,]
CONNECTORList.FCM$ConsensusInfo$`h= 1`$`G= 3`$MostProbableClustering$FCM$prediction$meancurves[1,]
names(CONNECTORList.FCM$ConsensusInfo)
h_string<-names(CONNECTORList.FCM$ConsensusInfo)
as.numeric(gsub("\\D", "", h_string))
out<-matrix(0,ncol=2,nrow = 4)
out[1,]=paste("CheckList: ",output)
## initial values:
output = 4
output.h = 4
cl.numb = NULL
features=NULL
out<-matrix(0,ncol=2,nrow = 4)
out[1,]=paste("CheckList: ",output)
out[2,]=paste("Feat: ",features)
out[3,]=paste("Check.h: ",output.h)
out[4,]=paste("Clust: ",cl.numb)
out
out<-matrix(0,ncol=1,nrow = 4)
out[1,]=paste("CheckList: ",output)
out[2,]=paste("Feat: ",features)
out[3,]=paste("Check.h: ",output.h)
out[4,]=paste("Clust: ",cl.numb)
out
write.table(out,file="outtmp.txt",row.names = F, col.names = F)
cl.numb <- 3:6
out[4,]=paste("Clust: ",cl.numb)
paste("Clust: ",cl.numb)
paste("Clust: ",cl.numb,collapse = T)
paste("Clust: ",cl.numb,collapse = ",")
paste("Clust: ",paste(cl.numb,collapse = ",") )
library(connector)
library(connector)
##### eseguo il codice che segue: tutto ok ######
rm(list=ls())
GrowDataFile<-system.file("data", "475dataset.xlsx", package = "connector")
AnnotationFile <-system.file("data", "475info.txt", package = "connector")
CONNECTORList<-DataImport(GrowDataFile = GrowDataFile, AnnotationFile = AnnotationFile)
CONNECTORList<-DataTruncation(data = CONNECTORList,feature="Progeny",truncTime = 70,labels = c("Time","Volume","Tumor Growth"))
CrossLogLike<-BasisDimension.Choice(data = CONNECTORList,p = 2:6 )
rm(list=ls())
GrowDataFile<-system.file("data", "475dataset.xlsx", package = "connector")
AnnotationFile <-system.file("data", "475info.txt", package = "connector")
CONNECTORList<-DataImport(GrowDataFile = GrowDataFile, AnnotationFile = AnnotationFile)
trCONNECTORList<-DataTruncation(data = CONNECTORList,feature="Progeny",truncTime = 70,labels = c("Time","Volume","Tumor Growth"))
CrossLogLike<-BasisDimension.Choice(data = trCONNECTORList,p = 2:6 )
library(connector)
##### eseguo il codice che segue: tutto ok ######
rm(list=ls())
GrowDataFile<-system.file("data", "475dataset.xlsx", package = "connector")
AnnotationFile <-system.file("data", "475info.txt", package = "connector")
CONNECTORList<-DataImport(GrowDataFile = GrowDataFile, AnnotationFile = AnnotationFile)
CONNECTORList<-DataTruncation(data = CONNECTORList,feature="Progeny",truncTime = 70,labels = c("Time","Volume","Tumor Growth"))
CrossLogLike<-BasisDimension.Choice(data = CONNECTORList,p = 2:6 )
library(connector)
##### eseguo il codice che segue: tutto ok ######
rm(list=ls())
GrowDataFile<-system.file("data", "475dataset.xlsx", package = "connector")
AnnotationFile <-system.file("data", "475info.txt", package = "connector")
CONNECTORList<-DataImport(GrowDataFile = GrowDataFile, AnnotationFile = AnnotationFile)
CONNECTORList<-DataTruncation(data = CONNECTORList,feature="Progeny",truncTime = 70,labels = c("Time","Volume","Tumor Growth"))
trCONNECTORList<-DataTruncation(data = CONNECTORList,feature="Progeny",truncTime = 70,labels = c("Time","Volume","Tumor Growth"))
CONNECTORList$TimeGrid
trCONNECTORList$TimeGrid
rm(list=ls())
GrowDataFile<-system.file("data", "475dataset.xlsx", package = "connector")
AnnotationFile <-system.file("data", "475info.txt", package = "connector")
CONNECTORList<-DataImport(GrowDataFile = GrowDataFile, AnnotationFile = AnnotationFile)
trCONNECTORList<-DataTruncation(data = CONNECTORList,feature="Progeny",truncTime = 70,labels = c("Time","Volume","Tumor Growth"))
debug(BasisDimension.Choice)
CrossLogLike<-BasisDimension.Choice(data = trCONNECTORList,p = 2:6 )
sample(1:n_sample, perc)
CONNECTORList
load("/home/pernice/Desktop/connectrExper/Prova/ClusteredData_G3to6_h1_p3.RData")
! is.null(CONNECTORList.FCM$ConsensusInfo)
!is.null(CONNECTORList.FCM$FCM)
!exists("CONNECTORList.FCM")
is.null(CONNECTORList.FCM$ConsensusInfo)
output<-1
nmCL<-names(CONNECTORList.FCM$ConsensusInfo[[1]])
cl.numb<-as.numeric(gsub("G= ", "", nmCL))
paste("Clust, ",paste(cl.numb,collapse = ", ") )
matrix(0,2,2)
paste0(",",as.integer(min(TimeGrid)),",",as.integer(max(TimeGrid)),",",as.integer(median(TimeGrid)),",")
paste0(",",3,",",2,",",22,",")
load("/home/pernice/Desktop/connectrExper/Prova/Data.RData")
CONNECTORList$TimeGrid
output<-1
features<-paste(names(CONNECTORList$LabCurv),collapse = ",")
TimeGrid<-CONNECTORList$TimeGrid
out[2,]=paste("Feat, ",features)
out<-matrix(0,3,1)
out[2,]=paste("Feat, ",features)
out[3,]=paste("Check.h, ",output.h)
out[2,]=paste("Feat, ",features)
out[3,]= c("Timegrid, ",paste0(",",as.integer(min(TimeGrid)),",",as.integer(max(TimeGrid)),",",as.integer(median(TimeGrid)),",") )
c("Timegrid, ",paste0(",",as.integer(min(TimeGrid)),",",as.integer(max(TimeGrid)),",",as.integer(median(TimeGrid)),",") )
out[3,]= paste("Timegrid, ",paste0(",",as.integer(min(TimeGrid)),",",as.integer(max(TimeGrid)),",",as.integer(median(TimeGrid)),",") )
paste("Timegrid, ",paste0(",",as.integer(min(TimeGrid)),",",as.integer(max(TimeGrid)),",",as.integer(median(TimeGrid)),",") )
paste("Feat, ",features)
paste("Timegrid, ",paste0(as.integer(min(TimeGrid)),",",as.integer(max(TimeGrid)),",",as.integer(median(TimeGrid)),",") )
library(epimod)
sensitivity_analysis
ibrary(deSolve)
library(ggplot2)
library(plyr)
### If DACther = True then model with dac therapy
DACther=F
############################################
#### Inj times ########
InjEBVTime=c(7,67,127,187,247)*24
if(DACther)
{
InjDACTime= seq(60,360,by=30)*24
}else InjDACTime= NULL
### Let define the number of DAC and EBV cells injected each time
numberDAC <<- 30
numberEBV <<- 1000
###############
###### structure used for the stopping and restarting lsoda
L<-length(c(InjDACTime,InjEBVTime))
InjTime<-data.frame("Times" = numeric(L), "kind" =character(L) )
InjTime$Times = c(InjDACTime,InjEBVTime)
InjTime$kind=rep(c("DAC","EBV"),c(length(InjDACTime),length(InjEBVTime)) )
InjTime<-InjTime[with(InjTime, order(Times)),]
rep<-count(InjTime[,1])
if( TRUE%in%c(rep[,2]>1) )
{
rep_pos<-which(rep[rep[,2]>1,1]==InjTime)
InjTime$kind[rep_pos]="BOTH"
InjTime<-unique(InjTime)
}
##################################################
FinalTime<-365*24
step=24
## Parameters for healthy person
#p<-c(.4,.2,0.09,0.5,0.1, 3 ,0.15,0.1,0.1)
## Parameters for sick person
p<-c(.4,.2,0.09,0.5,0.15, 1 ,0.1 ,0.1,0.1)
names(p)<- c( "TeE","TrE","Tr2","Te2","TekODC","TrkTe","TekEBV","rec","NKkT")
################################################################
########## Model reading and resolution
source("ModelRRMS.R")
y_names<-c("EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
names(yini)= y_names
dacPos<-c( which(y_names %in% grep("DAC", y_names, value=T)) )
ebvPosition<-c( which(y_names %in% grep("EBV", y_names, value=T)) )
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
library(deSolve)
library(ggplot2)
setwd("~/GIT/RRMS/ESSNandRRMS/DeterministicModel")
library(deSolve)
library(ggplot2)
library(plyr)
### If DACther = True then model with dac therapy
DACther=F
############################################
#### Inj times ########
InjEBVTime=c(7,67,127,187,247)*24
if(DACther)
{
InjDACTime= seq(60,360,by=30)*24
}else InjDACTime= NULL
### Let define the number of DAC and EBV cells injected each time
numberDAC <<- 30
numberEBV <<- 1000
###############
###### structure used for the stopping and restarting lsoda
L<-length(c(InjDACTime,InjEBVTime))
InjTime<-data.frame("Times" = numeric(L), "kind" =character(L) )
InjTime$Times = c(InjDACTime,InjEBVTime)
InjTime$kind=rep(c("DAC","EBV"),c(length(InjDACTime),length(InjEBVTime)) )
InjTime<-InjTime[with(InjTime, order(Times)),]
rep<-count(InjTime[,1])
if( TRUE%in%c(rep[,2]>1) )
{
rep_pos<-which(rep[rep[,2]>1,1]==InjTime)
InjTime$kind[rep_pos]="BOTH"
InjTime<-unique(InjTime)
}
##################################################
FinalTime<-365*24
step=24
## Parameters for healthy person
#p<-c(.4,.2,0.09,0.5,0.1, 3 ,0.15,0.1,0.1)
## Parameters for sick person
p<-c(.4,.2,0.09,0.5,0.15, 1 ,0.1 ,0.1,0.1)
names(p)<- c( "TeE","TrE","Tr2","Te2","TekODC","TrkTe","TekEBV","rec","NKkT")
################################################################
########## Model reading and resolution
source("ModelRRMS.R")
y_names<-c("EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
names(yini)= y_names
dacPos<-c( which(y_names %in% grep("DAC", y_names, value=T)) )
ebvPosition<-c( which(y_names %in% grep("EBV", y_names, value=T)) )
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
p
InjTime
i02
i=1
yini<-tail(res1,1)[,-1]
if(InjTime[i,2]=="EBV"){
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}else  if(InjTime[i,2]=="DAC"){
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
}else{
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}
start_time<-InjTime[i,1]
if(i==length(InjTime[,1]))
{
end_time<-FinalTime
}else{
end_time<-InjTime[(i+1),1]
}
#res1[length(res1[,2]),1]<- tail(res1[,1],1)-.2
res1 <- res1[-length(res1[,1]),]
yini
source("ModelRRMS.R")
yini
1/24
source("ModelRRMS.R")
y_names<-c("EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
names(yini)= y_names
dacPos<-c( which(y_names %in% grep("DAC", y_names, value=T)) )
ebvPosition<-c( which(y_names %in% grep("EBV", y_names, value=T)) )
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
100/375
source("ModelRRMS.R")
y_names<-c("EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
names(yini)= y_names
dacPos<-c( which(y_names %in% grep("DAC", y_names, value=T)) )
ebvPosition<-c( which(y_names %in% grep("EBV", y_names, value=T)) )
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
res1 <-lsoda(yini,1:10, funODE, parms=p)
res1 <-lsoda(yini,1:5, funODE, parms=p)
source("ModelRRMS.R")
y_names<-c("EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
names(yini)= y_names
dacPos<-c( which(y_names %in% grep("DAC", y_names, value=T)) )
ebvPosition<-c( which(y_names %in% grep("EBV", y_names, value=T)) )
###########
yini
res1 <-lsoda(yini,1:2, funODE, parms=p)
source("ModelRRMS.R")
y_names<-c("EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
names(yini)= y_names
res1 <-lsoda(yini,1:2, funODE, parms=p)
yini
source("ModelRRMS.R")
y_names<-c("EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
names(yini)= y_names
dacPos<-c( which(y_names %in% grep("DAC", y_names, value=T)) )
ebvPosition<-c( which(y_names %in% grep("EBV", y_names, value=T)) )
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
res1[8,]
for(i in 1:length(InjTime[,1]))
{
yini<-tail(res1,1)[,-1]
if(InjTime[i,2]=="EBV"){
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}else  if(InjTime[i,2]=="DAC"){
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
}else{
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}
start_time<-InjTime[i,1]
if(i==length(InjTime[,1]))
{
end_time<-FinalTime
}else{
end_time<-InjTime[(i+1),1]
}
#res1[length(res1[,2]),1]<- tail(res1[,1],1)-.2
res1 <- res1[-length(res1[,1]),]
res <-lsoda(yini,seq(from = start_time, to = end_time, by = step),funODE,parms=p)
res1<-rbind(res1,res)
}
res1<-as.data.frame(res1)
res1[,"time"]<-res1[,"time"]/24
colnames(res1)=c("time",y_names)
res1[366,]
source("ModelRRMS.R")
y_names<-c("EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
names(yini)= y_names
dacPos<-c( which(y_names %in% grep("DAC", y_names, value=T)) )
ebvPosition<-c( which(y_names %in% grep("EBV", y_names, value=T)) )
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
i=1
yini<-tail(res1,1)[,-1]
if(InjTime[i,2]=="EBV"){
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}else  if(InjTime[i,2]=="DAC"){
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
}else{
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}
start_time<-InjTime[i,1]
if(i==length(InjTime[,1]))
{
end_time<-FinalTime
}else{
end_time<-InjTime[(i+1),1]
}
#res1[length(res1[,2]),1]<- tail(res1[,1],1)-.2
res1 <- res1[-length(res1[,1]),]
res <-lsoda(yini,seq(from = start_time, to = end_time, by = step),funODE,parms=p)
res <-lsoda(yini,168:180,funODE,parms=p)
yini
source("ModelRRMS.R")
y_names<-c("EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
names(yini)= y_names
dacPos<-c( which(y_names %in% grep("DAC", y_names, value=T)) )
ebvPosition<-c( which(y_names %in% grep("EBV", y_names, value=T)) )
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
yini<-tail(res1,1)[,-1]
if(InjTime[i,2]=="EBV"){
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}else  if(InjTime[i,2]=="DAC"){
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
}else{
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}
start_time<-InjTime[i,1]
if(i==length(InjTime[,1]))
{
end_time<-FinalTime
}else{
end_time<-InjTime[(i+1),1]
}
#res1[length(res1[,2]),1]<- tail(res1[,1],1)-.2
res1 <- res1[-length(res1[,1]),]
res <-lsoda(yini,168:180,funODE,parms=p)
source("ModelRRMS.R")
y_names<-c("EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
names(yini)= y_names
dacPos<-c( which(y_names %in% grep("DAC", y_names, value=T)) )
ebvPosition<-c( which(y_names %in% grep("EBV", y_names, value=T)) )
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
yini<-tail(res1,1)[,-1]
if(InjTime[i,2]=="EBV"){
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}else  if(InjTime[i,2]=="DAC"){
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
}else{
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}
start_time<-InjTime[i,1]
if(i==length(InjTime[,1]))
{
end_time<-FinalTime
}else{
end_time<-InjTime[(i+1),1]
}
#res1[length(res1[,2]),1]<- tail(res1[,1],1)-.2
res1 <- res1[-length(res1[,1]),]
res <-lsoda(yini,seq(from = start_time, to = end_time, by = step),funODE,parms=p)
res <-lsoda(yini,168:180,funODE,parms=p)
