res1[,"time"]<-res1[,"time"]/24
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,ebvPos+1]))
View(res1)
numberDAC
- numberDAC /log(.1)
source('~/GIT/RRMS/ESSNandRRMS/DeterministicModel/Resolution.R')
InjEBVTime=c(7,67,127,187,247)*24
InjDACTime= NULL
### Let define the number of DAC and EBV cells injected each time
numberDAC <<- 30
numberEBV <<- 1000
###############
###### structure used for the stopping and restarting lsoda
L<-length(c(InjDACTime,InjEBVTime))
InjTime<-data.frame("Times" = numeric(L), "kind" =character(L) )
InjTime$Times = c(InjDACTime,InjEBVTime)
InjTime$kind=rep(c("DAC","EBV"),c(length(InjDACTime),length(InjEBVTime)) )
InjTime<-InjTime[with(InjTime, order(Times)),]
rep<-count(InjTime[,1])
if( TRUE%in%c(rep[,2]>1) )
{
rep_pos<-which(rep[rep[,2]>1,1]==InjTime)
InjTime$kind[rep_pos]="BOTH"
InjTime<-unique(InjTime)
}
##################################################
FinalTime<-365*24
step=24
## Parameters for healthy person
#p<-c(.4,.2,0.09,0.5,0.1, 3 ,0.15,0.1,0.1)
## Parameters for sick person
p<-c(.4,.2,0.09,0.5,0.15, 1 ,0.1 ,0.1,0.1)
names(p)<- c( "TeE","TrE","Tr2","Te2","TekODC","TrkTe","TekEBV","rec","NKkT")
################################################################
########## Model reading and resolution
source("ModelRRMS.R")
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
for(i in 1:length(InjTime[,1]))
{
yini<-tail(res1,1)[,-1]
if(InjTime[i,2]=="EBV"){
ebvPosition<-sample(.GlobalEnv$ebvPos,1)
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}else  if(InjTime[i,2]=="DAC"){
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
}else{
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
ebvPosition<-sample(.GlobalEnv$ebvPos,1)
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}
start_time<-InjTime[i,1]
if(i==length(InjTime[,1]))
{
end_time<-FinalTime
}else{
end_time<-InjTime[(i+1),1]
}
#res1[length(res1[,2]),1]<- tail(res1[,1],1)-.2
res1 <- res1[-length(res1[,1]),]
res <-lsoda(yini,seq(from = start_time, to = end_time, by = step),funODE,parms=p)
res1<-rbind(res1,res)
}
res1<-as.data.frame(res1)
res1[,"time"]<-res1[,"time"]/24
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,ebvPos+1]))
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,nkPos+1]))
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,"ODC_le1"]))
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,teffPos+1],col="Teff") )+geom_line(aes(y=res1[,tregPos+1],col="Treg"))
source('~/GIT/RRMS/ESSNandRRMS/DeterministicModel/ModelRRMS.R')
source('~/GIT/RRMS/ESSNandRRMS/DeterministicModel/Resolution.R')
data.frame(c("a",1),c("a",1),c("a",1),c("a",1),c("a",1))
matrix(c("a",1),c("a",1),c("a",1),c("a",1),c("a",1))
matrix(c("a",1,"a",1,"a",1,"a",1),c("a",1))
matrix(c("a",1,"a",1,"a",1,"a",1,"a",1),ncol = 2)
matrix(c("a",1,"a",1,"a",1,"a",1,"a",1),ncol = 2,byrow = T)
x<-matrix(c("a1",1,"a",1,"a",1,"a",1,"a",1),ncol = 2,byrow = T)
x["a1",2]
x<-seq(1:5)
x
names(x)<-c("a","b","c","d","e")
x
x["a"]
x["b"]
x
NumPlaces= seq(1:17)
names(NumPlaces)= c( "DAC","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
for (it in NumPlaces)
{
it
}
for (it in NumPlaces)
{
cat(it)
}
it=1
NumPlaces[it]
names(NumPlaces[it])
sum =0.0;
for (it in NumPlaces)
{
if( names(NumPlaces[it]) != "EffectorMemory" &&  names(NumPlaces[it]) != "NK_temp" && names(NumPlaces[it]) !="Resting_Teff_temp"&& names(NumPlaces[it]) !="Resting_Treg_temp")
sum = sum + Value[it];
}
InjEBVTime= data.frame(c("FirstInj", "SecondInj","ThirdInj", "FourthInj","FifthInj"), c(168 ,1608, 3048, 4488, 5928) ) # hour scale
t=1; t>InjEBVTime[2]
t=1; t>InjEBVTime[2,1]
t=1; t>InjEBVTime[2,2]
RATES_killingTransitions=data.frame(c( "TeffkillsEBV","TregKillsTeff","NKkillsTreg","NKkillsTeff" ,"TeffKillsODC"),c(0.1 ,1,0.1, 0.1 , 0.15) )
InjEBVTime[2,2]
RATES_killingTransitions["TeffKillsODC",2]
RATES_killingTransitions["TeffKillsODC",]
RATES_killingTransitions=data.frame(c(0.1 ,1,0.1, 0.1 , 0.15),colnames=c( "TeffkillsEBV","TregKillsTeff","NKkillsTreg","NKkillsTeff" ,"TeffKillsODC") )
TimoReg<-function(Value,NameTrans, NumPlaces, time)
{
rate=0.0 ;
idx = NumPlaces["Resting_Treg_temp"]
RestTregOut=0.0 ;
RestTregOut = Value[idx];
rate = ( RestTregOut / 63.0 ) * 20.0;
return(rate)
}
RATES_killingTransitions
InjEBVTime=  c(168 ,1608, 3048, 4488, 5928)  # hour scale
names(InjEBVTime)=c("FirstInj", "SecondInj","ThirdInj", "FourthInj","FifthInj")
RATES_killingTransitions=c(0.1 ,1,0.1, 0.1 , 0.15)
names(RATES_killingTransitions)=c( "TeffkillsEBV","TregKillsTeff","NKkillsTreg","NKkillsTeff" ,"TeffKillsODC")
RATES_killingTransitions["TeffKillsODC"]
library(deSolve)
library(ggplot2)
library(plyr)
### If DACther = True then model with dac therapy
DACther=T
############################################
#### Inj times ########
InjEBVTime=c(7,67,127,187,247)*24
if(DACther)
{
InjDACTime= seq(60,360,by=30)*24
}else InjDACTime= NULL
### Let define the number of DAC and EBV cells injected each time
numberDAC <<- 30
numberEBV <<- 1000
###############
###### structure used for the stopping and restarting lsoda
L<-length(c(InjDACTime,InjEBVTime))
InjTime<-data.frame("Times" = numeric(L), "kind" =character(L) )
InjTime$Times = c(InjDACTime,InjEBVTime)
InjTime$kind=rep(c("DAC","EBV"),c(length(InjDACTime),length(InjEBVTime)) )
InjTime<-InjTime[with(InjTime, order(Times)),]
rep<-count(InjTime[,1])
if( TRUE%in%c(rep[,2]>1) )
{
rep_pos<-which(rep[rep[,2]>1,1]==InjTime)
InjTime$kind[rep_pos]="BOTH"
InjTime<-unique(InjTime)
}
##################################################
FinalTime<-365*24
step=24
## Parameters for healthy person
#p<-c(.4,.2,0.09,0.5,0.1, 3 ,0.15,0.1,0.1)
## Parameters for sick person
p<-c(.4,.2,0.09,0.5,0.15, 1 ,0.1 ,0.1,0.1)
names(p)<- c( "TeE","TrE","Tr2","Te2","TekODC","TrkTe","TekEBV","rec","NKkT")
source('~/Desktop/CMISF2019/CompleteModel/Rpeova/ModelRRMS.R')
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
source("ModelRRMS.R")
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
for(i in 1:length(InjTime[,1]))
{
yini<-tail(res1,1)[,-1]
if(InjTime[i,2]=="EBV"){
ebvPosition<-sample(.GlobalEnv$ebvPos,1)
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}else  if(InjTime[i,2]=="DAC"){
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
}else{
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
ebvPosition<-sample(.GlobalEnv$ebvPos,1)
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}
start_time<-InjTime[i,1]
if(i==length(InjTime[,1]))
{
end_time<-FinalTime
}else{
end_time<-InjTime[(i+1),1]
}
#res1[length(res1[,2]),1]<- tail(res1[,1],1)-.2
res1 <- res1[-length(res1[,1]),]
res <-lsoda(yini,seq(from = start_time, to = end_time, by = step),funODE,parms=p)
res1<-rbind(res1,res)
}
res1<-as.data.frame(res1)
res1[,"time"]<-res1[,"time"]/24
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,ebvPos+1]))
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,nkPos+1]))
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,"ODC_le1"]))
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,teffPos+1],col="Teff") )+geom_line(aes(y=res1[,tregPos+1],col="Treg"))
library(deSolve)
library(ggplot2)
library(plyr)
### If DACther = True then model with dac therapy
DACther=F
############################################
#### Inj times ########
InjEBVTime=c(7,67,127,187,247)*24
if(DACther)
{
InjDACTime= seq(60,360,by=30)*24
}else InjDACTime= NULL
### Let define the number of DAC and EBV cells injected each time
numberDAC <<- 30
numberEBV <<- 1000
###############
###### structure used for the stopping and restarting lsoda
L<-length(c(InjDACTime,InjEBVTime))
InjTime<-data.frame("Times" = numeric(L), "kind" =character(L) )
InjTime$Times = c(InjDACTime,InjEBVTime)
InjTime$kind=rep(c("DAC","EBV"),c(length(InjDACTime),length(InjEBVTime)) )
InjTime<-InjTime[with(InjTime, order(Times)),]
rep<-count(InjTime[,1])
if( TRUE%in%c(rep[,2]>1) )
{
rep_pos<-which(rep[rep[,2]>1,1]==InjTime)
InjTime$kind[rep_pos]="BOTH"
InjTime<-unique(InjTime)
}
##################################################
FinalTime<-365*24
step=24
## Parameters for healthy person
#p<-c(.4,.2,0.09,0.5,0.1, 3 ,0.15,0.1,0.1)
## Parameters for sick person
p<-c(.4,.2,0.09,0.5,0.15, 1 ,0.1 ,0.1,0.1)
names(p)<- c( "TeE","TrE","Tr2","Te2","TekODC","TrkTe","TekEBV","rec","NKkT")
################################################################
########## Model reading and resolution
source('~/Desktop/CMISF2019/CompleteModel/Rpeova/ModelRRMS.R')
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
for(i in 1:length(InjTime[,1]))
{
yini<-tail(res1,1)[,-1]
if(InjTime[i,2]=="EBV"){
ebvPosition<-sample(.GlobalEnv$ebvPos,1)
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}else  if(InjTime[i,2]=="DAC"){
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
}else{
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
ebvPosition<-sample(.GlobalEnv$ebvPos,1)
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}
start_time<-InjTime[i,1]
if(i==length(InjTime[,1]))
{
end_time<-FinalTime
}else{
end_time<-InjTime[(i+1),1]
}
#res1[length(res1[,2]),1]<- tail(res1[,1],1)-.2
res1 <- res1[-length(res1[,1]),]
res <-lsoda(yini,seq(from = start_time, to = end_time, by = step),funODE,parms=p)
res1<-rbind(res1,res)
}
res1<-as.data.frame(res1)
res1[,"time"]<-res1[,"time"]/24
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,ebvPos+1]))
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,nkPos+1]))
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,"ODC_le1"]))
source('~/Desktop/CMISF2019/CompleteModel/Rpeova/ModelRRMS.R')
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
InjEBVTime=  c(168 ,1608, 3048, 4488, 5928)  # hour scale
names(InjEBVTime)=c("FirstInj", "SecondInj","ThirdInj", "FourthInj","FifthInj")
InjEBVTime["SecondInj"]
numeic(InjEBVTime["SecondInj"] )
numeric(InjEBVTime["SecondInj"] )
unlist(InjEBVTime["SecondInj"] )
as.integer(InjEBVTime["SecondInj"] )
source('~/Desktop/CMISF2019/CompleteModel/Rpeova/ModelRRMS.R')
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
source('~/Desktop/CMISF2019/CompleteModel/Rpeova/ModelRRMS.R')
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
source('~/Desktop/CMISF2019/CompleteModel/Rpeova/ModelRRMS.R')
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
for(i in 1:length(InjTime[,1]))
{
yini<-tail(res1,1)[,-1]
if(InjTime[i,2]=="EBV"){
ebvPosition<-sample(.GlobalEnv$ebvPos,1)
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}else  if(InjTime[i,2]=="DAC"){
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
}else{
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
ebvPosition<-sample(.GlobalEnv$ebvPos,1)
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}
start_time<-InjTime[i,1]
if(i==length(InjTime[,1]))
{
end_time<-FinalTime
}else{
end_time<-InjTime[(i+1),1]
}
#res1[length(res1[,2]),1]<- tail(res1[,1],1)-.2
res1 <- res1[-length(res1[,1]),]
res <-lsoda(yini,seq(from = start_time, to = end_time, by = step),funODE,parms=p)
res1<-rbind(res1,res)
}
res1<-as.data.frame(res1)
res1[,"time"]<-res1[,"time"]/24
ebvPos<-c( which(y_names %in% grep("EBV_*", y_names, value=T)) )
teffPos<-c( which(y_names %in% grep("^Teff_*", y_names, value=T)) )
odcPos<-c( which(y_names %in% grep("ODC_le5_*", y_names, value=T)))
il2Pos<-c( which(y_names %in% grep("IL2_*", y_names, value=T)))
tregPos<-c( which(y_names %in% grep("^Treg_*", y_names, value=T)) )
restregPos<-c( which(y_names %in% grep("Resting_Treg_*", y_names, value=T)) )
resteffPos<-c( which(y_names %in% grep("Resting_Teff_*", y_names, value=T)) )
nkPos<-c( which(y_names %in% grep("NK_*", y_names, value=T)) )
dacPos<-c( which(y_names %in% grep("DAC_*", y_names, value=T)) )
memPos<-c( which(y_names %in% grep("EffectorMemory", y_names, value=T)) )
source('~/Desktop/CMISF2019/CompleteModel/Rpeova/ModelRRMS.R')
y_names<-c("EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
names(yini)= y_names
ebvPos<-c( which(y_names %in% grep("EBV_*", y_names, value=T)) )
teffPos<-c( which(y_names %in% grep("^Teff_*", y_names, value=T)) )
odcPos<-c( which(y_names %in% grep("ODC_le5_*", y_names, value=T)))
il2Pos<-c( which(y_names %in% grep("IL2_*", y_names, value=T)))
tregPos<-c( which(y_names %in% grep("^Treg_*", y_names, value=T)) )
restregPos<-c( which(y_names %in% grep("Resting_Treg_*", y_names, value=T)) )
resteffPos<-c( which(y_names %in% grep("Resting_Teff_*", y_names, value=T)) )
nkPos<-c( which(y_names %in% grep("NK_*", y_names, value=T)) )
dacPos<-c( which(y_names %in% grep("DAC_*", y_names, value=T)) )
memPos<-c( which(y_names %in% grep("EffectorMemory", y_names, value=T)) )
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
for(i in 1:length(InjTime[,1]))
{
yini<-tail(res1,1)[,-1]
if(InjTime[i,2]=="EBV"){
ebvPosition<-sample(.GlobalEnv$ebvPos,1)
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}else  if(InjTime[i,2]=="DAC"){
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
}else{
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
ebvPosition<-sample(.GlobalEnv$ebvPos,1)
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}
start_time<-InjTime[i,1]
if(i==length(InjTime[,1]))
{
end_time<-FinalTime
}else{
end_time<-InjTime[(i+1),1]
}
#res1[length(res1[,2]),1]<- tail(res1[,1],1)-.2
res1 <- res1[-length(res1[,1]),]
res <-lsoda(yini,seq(from = start_time, to = end_time, by = step),funODE,parms=p)
res1<-rbind(res1,res)
}
res1<-as.data.frame(res1)
res1[,"time"]<-res1[,"time"]/24
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,ebvPos+1]))
View(res1)
View(res1)
source('~/Desktop/CMISF2019/CompleteModel/Rpeova/transition.R')
source('~/Desktop/CMISF2019/CompleteModel/Rpeova/ModelRRMS.R')
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
debug(funODE)
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
debug(TregActivation)
##Begin ODE Terms (X all transitions)
R_TregActivation = TregActivation(y,"TregActivation",NumPlaces,t,InputPlaces=c("Teff", "Resting_Treg"), card=c(1, 1) )
NumPlaces
NumPlaces= seq(1:18)
names(NumPlaces)= c( "EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
NumPlaces= seq(1:18)
names(NumPlaces)= c( "EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
NumPlaces
source('~/Desktop/CMISF2019/CompleteModel/Rpeova/ModelRRMS.R')
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
library(deSolve)
library(ggplot2)
library(plyr)
### If DACther = True then model with dac therapy
DACther=F
############################################
#### Inj times ########
InjEBVTime=c(7,67,127,187,247)*24
if(DACther)
{
InjDACTime= seq(60,360,by=30)*24
}else InjDACTime= NULL
### Let define the number of DAC and EBV cells injected each time
numberDAC <<- 30
numberEBV <<- 1000
###############
###### structure used for the stopping and restarting lsoda
L<-length(c(InjDACTime,InjEBVTime))
InjTime<-data.frame("Times" = numeric(L), "kind" =character(L) )
InjTime$Times = c(InjDACTime,InjEBVTime)
InjTime$kind=rep(c("DAC","EBV"),c(length(InjDACTime),length(InjEBVTime)) )
InjTime<-InjTime[with(InjTime, order(Times)),]
rep<-count(InjTime[,1])
if( TRUE%in%c(rep[,2]>1) )
{
rep_pos<-which(rep[rep[,2]>1,1]==InjTime)
InjTime$kind[rep_pos]="BOTH"
InjTime<-unique(InjTime)
}
##################################################
FinalTime<-365*24
step=24
## Parameters for healthy person
#p<-c(.4,.2,0.09,0.5,0.1, 3 ,0.15,0.1,0.1)
## Parameters for sick person
p<-c(.4,.2,0.09,0.5,0.15, 1 ,0.1 ,0.1,0.1)
names(p)<- c( "TeE","TrE","Tr2","Te2","TekODC","TrkTe","TekEBV","rec","NKkT")
source('~/Desktop/CMISF2019/CompleteModel/Rpeova/ModelRRMS.R')
y_names<-c("EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
names(yini)= y_names
ebvPos<-c( which(y_names %in% grep("EBV_*", y_names, value=T)) )
teffPos<-c( which(y_names %in% grep("^Teff_*", y_names, value=T)) )
odcPos<-c( which(y_names %in% grep("ODC_le5_*", y_names, value=T)))
il2Pos<-c( which(y_names %in% grep("IL2_*", y_names, value=T)))
tregPos<-c( which(y_names %in% grep("^Treg_*", y_names, value=T)) )
restregPos<-c( which(y_names %in% grep("Resting_Treg_*", y_names, value=T)) )
resteffPos<-c( which(y_names %in% grep("Resting_Teff_*", y_names, value=T)) )
nkPos<-c( which(y_names %in% grep("NK_*", y_names, value=T)) )
dacPos<-c( which(y_names %in% grep("DAC_*", y_names, value=T)) )
memPos<-c( which(y_names %in% grep("EffectorMemory", y_names, value=T)) )
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
debug(TregActivation)
debug(funODE)
y_names<-c("EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
names(yini)= y_names
ebvPos<-c( which(y_names %in% grep("EBV_*", y_names, value=T)) )
teffPos<-c( which(y_names %in% grep("^Teff_*", y_names, value=T)) )
odcPos<-c( which(y_names %in% grep("ODC_le5_*", y_names, value=T)))
il2Pos<-c( which(y_names %in% grep("IL2_*", y_names, value=T)))
tregPos<-c( which(y_names %in% grep("^Treg_*", y_names, value=T)) )
restregPos<-c( which(y_names %in% grep("Resting_Treg_*", y_names, value=T)) )
resteffPos<-c( which(y_names %in% grep("Resting_Teff_*", y_names, value=T)) )
nkPos<-c( which(y_names %in% grep("NK_*", y_names, value=T)) )
dacPos<-c( which(y_names %in% grep("DAC_*", y_names, value=T)) )
memPos<-c( which(y_names %in% grep("EffectorMemory", y_names, value=T)) )
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
y_names<-c("EBV","Teff","Treg","ODC_le1","ODC_le2","ODC_le3","ODC_le4","ODC_le5","NK","IL2","DAC","Resting_Teff","Resting_Treg","EffectorMemory","Resting_Treg_temp","Resting_Teff_temp","NK_temp")
names(yini)= y_names
ebvPos<-c( which(y_names %in% grep("EBV_*", y_names, value=T)) )
teffPos<-c( which(y_names %in% grep("^Teff_*", y_names, value=T)) )
odcPos<-c( which(y_names %in% grep("ODC_le5_*", y_names, value=T)))
il2Pos<-c( which(y_names %in% grep("IL2_*", y_names, value=T)))
tregPos<-c( which(y_names %in% grep("^Treg_*", y_names, value=T)) )
restregPos<-c( which(y_names %in% grep("Resting_Treg_*", y_names, value=T)) )
resteffPos<-c( which(y_names %in% grep("Resting_Teff_*", y_names, value=T)) )
nkPos<-c( which(y_names %in% grep("NK_*", y_names, value=T)) )
dacPos<-c( which(y_names %in% grep("DAC_*", y_names, value=T)) )
memPos<-c( which(y_names %in% grep("EffectorMemory", y_names, value=T)) )
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
source('~/Desktop/CMISF2019/CompleteModel/Rpeova/ModelRRMS.R')
###########
res1 <-lsoda(yini,seq(from = 0, to = InjTime[1,1], by = step), funODE, parms=p)
View(res1)
for(i in 1:length(InjTime[,1]))
{
yini<-tail(res1,1)[,-1]
if(InjTime[i,2]=="EBV"){
ebvPosition<-sample(.GlobalEnv$ebvPos,1)
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}else  if(InjTime[i,2]=="DAC"){
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
}else{
yini[dacPos]<-yini[.GlobalEnv$dacPos]+numberDAC
ebvPosition<-sample(.GlobalEnv$ebvPos,1)
yini[ebvPosition]<-yini[ebvPosition]+numberEBV
}
start_time<-InjTime[i,1]
if(i==length(InjTime[,1]))
{
end_time<-FinalTime
}else{
end_time<-InjTime[(i+1),1]
}
#res1[length(res1[,2]),1]<- tail(res1[,1],1)-.2
res1 <- res1[-length(res1[,1]),]
res <-lsoda(yini,seq(from = start_time, to = end_time, by = step),funODE,parms=p)
res1<-rbind(res1,res)
}
res1<-as.data.frame(res1)
res1[,"time"]<-res1[,"time"]/24
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,ebvPos+1]))
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,nkPos+1]))
nkPos
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,"NK"]))
ggplot(res1,aes(x=time))+geom_line(aes(y=NK]))
ggplot(res1,aes(x=time))+geom_line(aes(y=NK))
View(res1)
colnames(res1)=c("time",y_names)
ggplot(res1,aes(x=time))+geom_line(aes(y=res1[,ebvPos+1]))
ggplot(res1,aes(x=time))+geom_line(aes(y=NK))
ggplot(res1,aes(x=time))+geom_line(aes(y=ODC_le1))
source('~/GIT/RRMS/ESSNandRRMS/DeterministicModel/Resolution.R')
